'use strict';

angular.module('cartModule', []);
'use strict';

// intitiate the app and Inject all of the app module dependencies
//configure the routes
var moheera = angular.module('moheera', ['ui.bootstrap', 'ui.router', 'angularChart','ngResource', 'authModule', 'homeModule', 'userModule', 'productModule', 'orderModule', 'cartModule', 'reportModule']);

//RouteScopes & Routes Configurations
moheera.config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {
	$urlRouterProvider.otherwise('notfound');
	$stateProvider
		.state('notfound',{
			url: '/notfound',
			templateUrl: 'public/modules/config/view/notfound.config.view.html',
			controller: 'errorConfigController'
		})
		.state('home', {
			url: '',
			templateUrl: 'public/modules/home/view/index.home.view.html',
			controller: 'indexHomeController'
		})
		.state('contact', {
			url: '/contact',
			templateUrl: 'public/modules/home/view/contact.home.view.html',
			controller: 'indexHomeController'
		})
		.state('about', {
			url: '/about',
			templateUrl: 'public/modules/home/view/about.home.view.html',
			controller: 'indexHomeController'
		})
		.state('signin', {
			url: '/signin',
			templateUrl: 'public/modules/auth/view/signin.auth.view.html',
			controller: 'signinAuthController'
		})
		.state('signup', {
			url: '/signup',
			templateUrl: 'public/modules/auth/view/signup.auth.view.html',
			controller: 'signupAuthController'
		})
		.state('signout', {
			url: 'signout',
			controller: 'signoutAuthController'
		})
		.state('profile', {
			url: '/profile',
			templateUrl: 'public/modules/user/view/profile.user.view.html',
			controller: 'profileUserControlller'
		})
		.state('profile.category', {
			url: '/product/category/:category',
			templateUrl: 'public/modules/user/view/category.user.view.html',
			controller: 'categoryUserController'
		})
		.state('profile.remove', {
			url: '/remove',
			templateUrl: 'public/modules/user/view/remove.account.user.view.html',
			controller: 'removeAccountUserController'
		})
		.state('profile.setting', {
			url:'/setting',
			templateUrl: 'public/modules/user/view/setting.user.view.html',
			controller: 'settingUserController'
		})
		.state('profile.userPassword', {
			url: '/account/password',
			templateUrl: 'public/modules/user/view/change.password.user.view.html',
			controller: 'changePasswordUserController'
		})
		.state('profile.report', {
			url: '/report',
			templateUrl: 'public/modules/report/view/all.report.view.html',
			controller: 'allReportController'
		})
		.state('profile.orderDone', {
			url: '/order/done',
			templateUrl: 'public/modules/order/view/done.order.view.html',
			controller: 'allOrderController'
		})
		.state('profile.orderCreate', {
			url: '/order/create',
			templateUrl: 'public/modules/order/view/create.order.view.html',
			controller: 'createOrderController'
		})
		.state('profile.singleOrder', {
			url: '/product/:productId/order/:id/',
			templateUrl: 'public/modules/order/view/single.order.view.html',
			controller: 'singleOrderController'
		})
		.state('profile.order', {
			url: '/order',
			templateUrl: 'public/modules/order/view/all.order.view.html',
			controller: 'allOrderController'
		})
		.state('profile.addProduct', {
			url: '/product/add',
			templateUrl: 'public/modules/product/view/add.product.view.html',
			controller: 'addProductController'
		})
		.state('profile.editProduct', {
			url: '/product/:name/edit',
			templateUrl: 'public/modules/product/view/edit.product.view.html',
			controller: 'editProductController'
		})
		.state('profile.singleProduct', {
			url: '/product/:name',
			templateUrl: 'public/modules/product/view/single.product.view.html',
			controller: 'singleProductController'
		})
		.state('profile.cart', {
			url: '/cart',
			templateUrl: 'public/modules/cart/view/all.cart.view.html',
			controller: 'allCartController'
		})
		.state('user', {
			url: '/:userName',
			templateUrl: 'public/modules/user/view/other.user.view.html',
			controller: 'otherUserControlller'
		})
		.state('user.singleProduct', {
			url: '/:userId/productId',
			templateUrl: 'public/modules/user/view/profile.user.view.html',
			controller: 'profileUserControlller'
		});
}])
.run(['$rootScope', function ($rootScope) {
	$rootScope.logged = false;
}]);
'use strict';

angular.module('authModule', []);
'user strict';

angular.module('homeModule', []);
'use strict';

angular.module('orderModule', []);
'use strict';

angular.module('productModule', []);
'use strict';

angular.module('reportModule', []);
'user strict';

angular.module('userModule', []);
'use strict';

angular.module('cartModule').controller('allCartController', ['$scope', '$location', 'connectCartFactory', '$state', 'registerUserConfigFactory', function ($scope, $location, connectCartFactory, $state, registerUserConfigFactory) {
	$scope.user = registerUserConfigFactory.getUser()
	connectCartFactory.query({action: 'products'}, function (response) {
		$scope.cart = response;
	});

	$scope.onePlusQuantity = function (index) {
		if($scope.cart[index].quantity < 20){
			$scope.cart[index].quantity++;
			connectCartFactory.update({product: $scope.cart[index]}, function (response) {
				$scope.error = false;
				$scope.user.cart = $scope.cart;
				registerUserConfigFactory.setUser($scope.user);
			}, function (err) {
				$scope.cart[index].quantity--;
				$scope.error = err.data.message;
			});
		}
	}

	$scope.oneMinusQuantity = function (index) {
		if($scope.cart[index].quantity >= 2){
			$scope.cart[index].quantity--;
			connectCartFactory.update({product: $scope.cart[index]}, function (response) {
				$scope.error = false;
				$scope.user.cart = $scope.cart;
				registerUserConfigFactory.setUser($scope.user);
			}, function (err) {
				$scope.cart[index].quantity++;
				$scope.error = err.data.message;
			});
		}
	}

	$scope.removeCartProduct = function (index) {
		connectCartFactory.remove({productId: $scope.cart[index].productId}, function (response) {
			$scope.cart.splice(index, 1);
		});
	}

	$scope.goToOrder = function () {
		//go to the create order page , use the state and pass empty parameter to reload the controller
		$state.go('profile.orderCreate', {}, {reload: true});
	}

}]);
'use strict';

angular.module('cartModule').factory('connectCartFactory', ['$resource', function ($resource) {
	return $resource('/user/cart/:productId/:action',
			{
				productId: '@productId',
				action: '@action'
			},
			{
				"update": {
					method: 'PUT',	
				}
			}
		)
}]);
'use strict';

angular.module('moheera').controller('errorConfigController', ['$scope', function ($scope) {
	
}]);
'use strict';

angular.module('moheera').controller('navMenu', ['$rootScope', '$scope', function ($rootScope, $scope) {
	//initiate the menu in mobile and tables in no collapse status
	$scope.navbarCollapsed = false;

	// Collapsing the menu after navigation
	$scope.$on('$stateChangeSuccess', function() {
		$scope.navbarCollapsed = false;
	});

	// Watch the user
	$rootScope.$watch('logged', function () {
		if($rootScope.logged){
			$scope.loggedLink = true;
			$scope.notLoggedLink = false;
		} else {
			$scope.loggedLink = false;
			$scope.notLoggedLink = true;
		}
	});

}]);

'use strict';

angular.module('moheera').factory('registerUserConfigFactory', ['$window', '$rootScope', '$q', function ($window, $rootScope, $q) {
	//Get the user info from the window element that has been injected in the index page on the server side
	var _this = {};

	//user info
	_this.user = false;

	//Read user info
	_this.readUserInfo = function () {
		return _this.user = $window.userInfo || false;
	};

	//Clear user info from the browser and change the rootScope status to false
	_this.clearUserInfo = function () {
		//var element = document.getElementById("userInfoBlock"); //this code dose not seem to work!
		//if(element) element.parentNode.removeChild(element); //this code dose not seem to work!
		$rootScope.logged = false;
		_this.user = $window.userInfo = false;
	};

	//register user info
	_this.setUser = function (user) {
		_this.user = $window.userInfo = user || false;
		if(_this.user){
			$rootScope.logged = true;
		};
	};

	//Get the user info
	_this.getUser = function () {
		var deferred = $q.defer();
		deferred.resolve(_this.readUserInfo());
		deferred.promise.then(function (result) {
		 	if(result){
		 		_this.user = result;
		 		$rootScope.logged = true;
		 	};
		});
		return _this.user;
	};

	return _this;
}]);
'user strict';

angular.module('authModule').controller('signinAuthController', ['registerUserConfigFactory', '$scope', '$http', '$location', function (registerUserConfigFactory, $scope, $http, $location) {
	$scope.signIn = function () {
		$http.post('/login', $scope.credentials)
		.success(function (data, success) {
			registerUserConfigFactory.setUser(data);
			$location.path('/profile');
		})
		.error(function (data, error) {
			$scope.error = data;
		});
	};
}]);
'user strict';

angular.module('authModule').controller('signoutAuthController', ['registerUserConfigFactory', '$http', '$state', function (registerUserConfigFactory, $http, $state) {
	$http.get('/logout')
	.success(function (data, success) {
		registerUserConfigFactory.clearUserInfo();
		$state.go('home', {}, {reload: true});
	});
}]);
'user strict';

angular.module('authModule').controller('signupAuthController', ['registerUserConfigFactory', '$scope', '$location', 'connectAuthFactory', function (registerUserConfigFactory, $scope, $location, connectAuthFactory) {
	if(registerUserConfigFactory.getUser()) $location.path('/profile');
	$scope.signUp = function () {
		connectAuthFactory.save($scope.credentials, function (data, res) {
			$location.path('/signin');
		},
		function (err) {
			$scope.error = err.data.message;
		});
	}

}]);
'use strict';

angular.module('authModule').factory('connectAuthFactory', ['$resource', function ($resource) {
		return $resource('/user/:id');
}]);
'user strict';

angular.module('homeModule').controller('indexHomeController', ['registerUserConfigFactory', '$location', '$scope', function (registerUserConfigFactory, $location, $scope) {
	$scope.user = registerUserConfigFactory.getUser();
	// If the user is registred redirect the user to the profile page
	if($scope.user) $location.path('/profile');

}]);
'use stritc';

angular.module('orderModule').controller('allOrderController', ['$scope', '$location', 'registerUserConfigFactory', 'connectOrderFactory', '$state', 'statusOrderFactory', function ($scope, $location, registerUserConfigFactory, connectOrderFactory, $state, statusOrderFactory) {
	$scope.user = registerUserConfigFactory.getUser();
	$scope.statusOptions = statusOrderFactory.status;

	$scope.showStatus = function () {
		var order = {};
		return order.status = 'pending';
	}

	connectOrderFactory.query(function (response) {
		$scope.orderInfo = response;
	}, function (err) {
		$scope.error = err.data.message;
	});

	$scope.orderDetails = function (productId, orderId) {
		//redirect to single order page
		$state.go('profile.singleOrder', {productId: productId, id: orderId}, {reload: true});
	}

}]);
'use strict';

angular.module('orderModule').controller('createOrderController', ['$scope', '$location', 'connectOrderFactory', 'registerUserConfigFactory',function ($scope, $location, connectOrderFactory, registerUserConfigFactory) {
	$scope.user = registerUserConfigFactory.getUser();
	$scope.cart = $scope.user.cart;

	$scope.cartInfo = function () {
		var cartItems = $scope.user.cart,
			totalQuantity = 0,
			totalPrice = 0;

		cartItems.forEach(function (item) {
			totalPrice += (item.price * item.quantity);
			totalQuantity += item.quantity;
		});

		return {
			"totalQuantity": totalQuantity,
			"totalPrice": totalPrice
		}
	}

	$scope.confirmOrder = function () {
		var orderInfo = {
			"mobilePhone": $scope.newOrder.mobilePhone,
			"address": $scope.newOrder.address,
			"remarks": $scope.newOrder.remarks,
			"status": "pending"
		}

		connectOrderFactory.save({"info": orderInfo}, function (response) {
			$location.path('profile/order/done');
			//make the user cart empty (client side)
			$scope.user.cart = [];
			registerUserConfigFactory.setUser($scope.user);
		}, function (err) {
			$scope.error = err.data.message;
		});
	}


}]);
'use strict';

angular.module('orderModule').controller('singleOrderController', ['$scope', '$location', 'connectOrderFactory', '$stateParams', 'statusOrderFactory', function ($scope, $location, connectOrderFactory, $stateParams, statusOrderFactory) {
	$scope.statusOptions = statusOrderFactory.status;

	connectOrderFactory.get({productId: $stateParams.productId, id: $stateParams.id}, function (response) {
		$scope.orderInfo = response.order;
		$scope.productInfo = response.product;
		//get the current status and save as old so we can get it if the status
		//got updateed
		$scope.oldStatus = response.order.status;
	}, function (err) {
		$scope.error = err.data.message;
	});


	$scope.updateOrder = function () {
		var updateInfo = {
			status: $scope.orderInfo.status,
			statusHistory: {
				oldStatus: $scope.oldStatus,
				updateRemarks: $scope.updateRemarks
			}
		}
		connectOrderFactory.update({productId: $stateParams.productId, id: $stateParams.id}, updateInfo, function (response) {
			$scope.updateRemarks = '';
			$scope.success = response;
			$scope.error = false;
			$scope.orderInfo = response.order;
		}, function (err) {
			$scope.error = err.data.message;
			$scope.success = false;
		});
	}

}]);
'use strict';

angular.module('orderModule').factory('connectOrderFactory', ['$resource', function ($resource) {
	return $resource('/product/:productId/order/:id/:name',
			{
				productId: "@productId",
				id: "@id",
				name: "@name"
			},
			{
				update: {
					method: "PUT"
				}
			}
		);
}]);
'user strict';

angular.module('orderModule').factory('statusOrderFactory', [function () {
	return {
			status: [
			'delivered',
			'pending',
			'processing',
			'canceled']
		}
}]);
'use strict';

angular.module('orderModule').filter('statusOrderFilter', [function () {
	return function (orders, status) {
		var filtered = [];
		if(!status){
			filtered = orders;
		} else {
			for(var i=0; i < orders.length;i++){
				var value = orders[i];
				if(value.status == status){
					filtered.push(value);
				}
			}
		}
		return filtered;
	}
}]);
'use strict';

angular.module('productModule').controller('addProductController', ['$scope', '$location', 'connectProductFactory', 'categoryProductFactory', '$state', function ($scope, $location, connectProductFactory, categoryProductFactory, $state) {
	$scope.categoryOptions = categoryProductFactory;

	$scope.addProduct = function () {

		var fd = new FormData();
		fd.append('image1', document.getElementById('image1').files[0]);
		fd.append('image2', document.getElementById('image2').files[0]);
		fd.append('image3', document.getElementById('image3').files[0]);
		fd.append('image4', document.getElementById('image4').files[0]);

		fd.append('name', $scope.newProduct.name);
		fd.append('price', $scope.newProduct.price);
		fd.append('quantity', $scope.newProduct.quantity);
		fd.append('category', $scope.newProduct.category);
		fd.append('desc', $scope.newProduct.desc);

		connectProductFactory.save(fd, function (response) {
			//go to profile page , use the state and pass empty parameter to reload the controller
			$state.go('profile', {}, {reload: true});
		}, function (err) {
			console.log(err);
			$scope.error = err.data.message;
		});
	}

	$scope.count = function () {
		var count = [];
		for(var i=1;i<=20;i++){
			count.push(i);
		}
		return count;
	}
}]);
'use strict';

angular.module('productModule').controller('editProductController', ['$scope', '$stateParams', '$location', 'connectProductFactory', 'categoryProductFactory', function ($scope, $stateParams, $location, connectProductFactory, categoryProductFactory) {
	$scope.categoryOptions = categoryProductFactory;

	connectProductFactory.get({getByName: $stateParams.name}, function (response) {
		$scope.productInfo = response;
		console.log(response);
	}, function (err) {
		$location.path('/notfound');
	});

	$scope.updateProductInfo = function () {
		var fd = new FormData();
		fd.append('image1', document.getElementById('image1').files[0]);
		fd.append('image2', document.getElementById('image2').files[0]);
		fd.append('image3', document.getElementById('image3').files[0]);
		fd.append('image4', document.getElementById('image4').files[0]);

		fd.append('name', $scope.productInfo.name);
		fd.append('price', $scope.productInfo.price);
		fd.append('quantity', $scope.productInfo.quantity);
		fd.append('category', $scope.productInfo.category);
		fd.append('desc', $scope.productInfo.desc);

		connectProductFactory.update({id: $scope.productInfo._id}, fd, function (response) {
			$scope.error = false;
			$scope.success = true;
		}, function (err) {
			$scope.success = false;
			$scope.error = err.data.message;
		});
	}

}]);
'use strict';

angular.module('productModule').controller('singleProductController', ['$scope', '$stateParams', 'connectProductFactory', '$location', 'connectCommentProductFactory', 'registerUserConfigFactory', 'connectCartFactory', '$state', function ($scope, $stateParams, connectProductFactory, $location, connectCommentProductFactory, registerUserConfigFactory, connectCartFactory, $state) {
	$scope.user = registerUserConfigFactory.getUser();

	$scope.productName = $stateParams.name;

	connectProductFactory.get({getByName: $scope.productName}, function (response) {
		$scope.product = response;
	}, function (err) {
		$location.path('/notfound');
	});

	$scope.showRemoveProductBox = function () {
		$scope.removeProductBox = true;
	}

	$scope.removeProduct = function () {
		connectProductFactory.remove({id: $scope.product._id},function (response) {
			//go to profile page , use the state and pass empty parameter to reload the controller
			$state.go('profile', {}, {reload: true});
		}, function (err) {
			$scope.error = err.data.message;
		});
	}

	$scope.cancelRemoveProduct = function () {
		$scope.removeProductBox = false;
	}

	$scope.addComment = function () {
		if($scope.newComment){
			connectCommentProductFactory.save({id: $scope.product._id},{content: $scope.newComment}, function (response) {
				$scope.product.comment.push(response);
				$scope.newComment = '';
			}, function (err) {
				$scope.error = err.data.message;
			});
		}
	}

	$scope.removeComment = function (index, commentId, productId) {
		connectCommentProductFactory.remove({commentId: commentId, id: productId}, function (response) {
			$scope.product.comment.splice(index, 1);
		}, function (err) {
			$scope.error = err.data.message;
		});
	}

}]);
'use strict';

angular.module('productModule').directive('cartIconProductDirective', ['connectCartFactory', 'registerUserConfigFactory', function (connectCartFactory, registerUserConfigFactory) {
	return {
		restrict: 'A',
		templateUrl: 'public/modules/product/view/cart.icon.product.view.html',
		replace: true,
		transclude: true,
		scope: {
			product: '=cartIconProductDirective'
		},
		link: function (scope, elem, attrs) {
			scope.user = registerUserConfigFactory.getUser();
			scope.$watch('product', function (value) {
				var getStatus = function () {
					if(value && scope.user){
						if(scope.user.cart.length > 0){
							var carts = scope.user.cart;
							for(var i=0;i <= carts.length;i++){
								if(carts[i]){
									if(carts[i].productId == value._id){
										return true;
									}
								}
							}
						}
						return false;
					} else {
						return false;
					}
				}
				//update the 'isChecked' value
				scope.isChecked = getStatus();
			});

			scope.addToCart = function (product) {
				if(scope.isChecked == false && product.quantity >= 1){
					connectCartFactory.save({productId: product._id, product: product}, function (response) {
						scope.user.cart = response.cart;
						registerUserConfigFactory.setUser(scope.user);
						scope.isChecked = true;
					}, function (err) {
						console.log(err);
					});
				} else {
					connectCartFactory.remove({productId: product._id}, function (response) {
						scope.user.cart = response.cart;
						registerUserConfigFactory.setUser(scope.user);	
						scope.isChecked = false;
					});
				}
			}
		}
	}
}]);
'use strict';

angular.module('productModule').directive('commentIconProductDirective', ['registerUserConfigFactory', function (registerUserConfigFactory) {
	return {
		restrict: 'A',
		templateUrl: 'public/modules/product/view/comment.icon.product.view.html',
		replace: true,
		transclude: true,
		scope: {
			product: '=commentIconProductDirective'
		},
		link: function (scope, elem, attrs) {
			//the product comment is passed through the controller!!!
			//think of the comment template as part of the page that contains it,
			//and think of a scope object passed  eaither from the controller
			//or the through an ng-repeat , now the comment code must be able to access
			//the object named comment and thats what happens here!!!
			var user = registerUserConfigFactory.getUser();
			scope.$watch('product', function (value) {
				var getStatus = function () {
					if(value){
						if(value.comment.length > 0){
							var comments = value.comment;
							//to access the comment 'owner' info embedded in the product retrieved from moheera api
							// product.comment[array].user[array].'info'
							for(var i=0;i <= comments.length;i++){
								if(comments[i].author[0]._id == user._id){
									return true;
								}
							}
						}
						return false;
					} else {
						return false;
					}
				}
				//update the 'isChecked' value
				scope.isChecked = getStatus();
			});

			scope.addComment = function () {
				if($scope.newComment){
					connectCommentProductFactory.save({id: $scope.product._id},{content: $scope.newComment}, function (response) {
						$scope.product.comment.push(response);
						$scope.newComment = '';
					}, function (err) {
						$scope.error = err.data.message;
					});
				}
			}

			scope.removeComment = function (index, commentId, productId) {
				connectCommentProductFactory.remove({commentId: commentId, id: productId}, function (response) {
					$scope.product.comment.splice(index, 1);
				}, function (err) {
					$scope.error = err.data.message;
				});
			}


		}
	}
}]);
'use strict';

angular.module('productModule').directive('heartIconProductDirective', ['registerUserConfigFactory', 'connectHeartProductFactory', function (registerUserConfigFactory, connectHeartProductFactory) {
	return {
		restrict: 'A',
		templateUrl: 'public/modules/product/view/heart.icon.product.view.html',
		replace: true,
		transclude: true,
		scope: {
			product: '=heartIconProductDirective'
		},
		link: function (scope, elem, attrs) {
			var user = registerUserConfigFactory.getUser();
			scope.$watch('product', function (value) {
				var getStatus = function () {
					if(value){
						if(value.heart.length > 0){
							var hearts = value.heart;
							//to access the heart 'owner' info embedded in the product retrieved from moheera api
							// product.heart[array].user[array].'info'
							for(var i=0;i <= hearts.length;i++){
								if(hearts[i].user[0]._id == user._id){
									return true;
								}
							}
						}
						return false;
					} else {
						return false;
					}
				}
				//update the 'isChecked' value
				scope.isChecked = getStatus();
			});

			//heart or unheart a prodcut
			//for some reason the product $watch above is not updating the
			// 'isChecked' variable so we do it manually
			scope.heartProduct = function (productId) {
				if(scope.isChecked == false){
					connectHeartProductFactory.save({productId: productId}, function (response) {
						scope.product.heart = response.heart;
						scope.isChecked = true;
					});
				} else {
					connectHeartProductFactory.remove({productId: productId}, function (response) {
						scope.product.heart = response.heart;
						scope.isChecked = false;
					});
				}
			}

		}
	}
}]);
'use strict';

angular.module('productModule').directive('productBoxProductDirective', [function () {
	return {
		restrict: 'A',
		templateUrl: 'public/modules/product/view/product.box.product.view.html',
		replace: true,
		transclude: true,
		scope: {
			product: '=productBoxProductDirective'
		}
	}
}]);
'use strict';

angular.module('productModule').factory('categoryProductFactory', [function () {
	return [
		"men",
		"women",
		"kid"
	];
}]);
'use strict';

angular.module('userModule').factory('connectCommentProductFactory', ['$resource', function ($resource) {
	return $resource('product/:id/comment/:commentId',
			{
				id: "@id",
				commentId: "@commentId"
			}
		)
}]);
'use strict';

angular.module('productModule').factory('connectHeartProductFactory', ['$resource', function ($resource) {
	return $resource('product/:productId/heart/:heartId', 
			{
				productId: '@productId',
				heartId: '@heartId'
			}
		);
}]);
'use strict';

angular.module('productModule').factory('connectProductFactory', ['$resource', function ($resource) {
	return $resource('/product/:action/:id/:getByName/:categoryName',
			{
				id: "@_id",
				action: "@action",
				categoryName: "@categoryName",
				getByName: "@getByName"
			},
			{
				"update": {
					method:"PUT",
					withCredentials: true,
					headers: {'Content-Type': undefined },
					transformRequest: angular.identity
				},
				"save": {
					method:"POST",
					withCredentials: true,
					headers: {'Content-Type': undefined },
					transformRequest: angular.identity
				}
			}
		);
}]);
'use strict';

angular.module('reportModule').controller('allReportController', ['$scope', '$location', function ($scope, $location) {

	$scope.productView = {
		dataset:[
			{
				'day': '2013-01-02_00:00:00',
				'sales': 13461.295202,
				'income': 12365.053
			},
			{
				'day': '2014-01-02_00:00:00',
				'sales': 1346.202,
				'income': 1235.3
			},
			{
				'day': '2015-01-02_00:00:00',
				'sales': 161.295202,
				'income': 1365.053
			}
		],
		schema: {
			day: {
				type: 'datetime',
				format: '%Y-%m-%d_%H:%M:%S',
				name: 'Date'
			}
		},
		options: {
			rows: [{
				key: 'income',
				type: 'bar'
			}, {
				key: 'sales'
			}],
			xAxis: {
				key: 'day',
				displayFormat: '%Y-%m-%d %H:%M:%S'
			}
		}
	};

	$scope.productSaleByCategory = {
		dataset:[
			{
				'day': '2013-01-02_00:00:00',
				'sales': 13461.295202,
				'income': 12365.053
			},
			{
				'day': '2014-01-02_00:00:00',
				'sales': 1346.202,
				'income': 1235.3
			},
			{
				'day': '2015-01-02_00:00:00',
				'sales': 161.295202,
				'income': 1365.053
			}
		],
		schema: {
			day: {
				type: 'datetime',
				format: '%Y-%m-%d_%H:%M:%S',
				name: 'Date'
			}
		},
		options: {
			rows: [{
				key: 'income',
				type: 'pie'
			}, {
				key: 'sales'
			}],
			xAxis: {
				key: 'day',
				displayFormat: '%Y-%m-%d %H:%M:%S'
			}
		}
	};



}]);
'use strict';

angular.module('userModule').controller('categoryUserController', ['connectProductFactory', '$stateParams', '$scope', function (connectProductFactory, $stateParams, $scope) {
	connectProductFactory.query({action: "category", categoryName: $stateParams.category}, function (respense) {
		$scope.productByCategory = respense;
	});
}]);
'use strict';

angular.module('userModule').controller('changePasswordUserController', ['$scope', '$location', 'connectUserFactory', function ($scope, $location, connectUserFactory) {
	//Update user password
	$scope.changeUserPassword = function () {
		//Make sure no success or error messages are showed
		$scope.success = false;
		$scope.error = false;

		connectUserFactory.update({action: "password"},{newPassword: $scope.userInfo.newPassword, currentPassword: $scope.userInfo.currentPassword}, function (response) {
			$scope.success = true;
			//empty form fields
			$scope.userInfo.newPassword = '';
			$scope.userInfo.currentPassword = '';
			$scope.userInfo.verifyPassword = '';
		}, function (error) {
			$scope.error = error.data.message;
		});
	}

	//not working perfectly but does the job for now
	$scope.noMatch = function () {
		if($scope.userInfo.newPassword == $scope.userInfo.verifyPassword) {
			return false;
		} else {
			return true;	
		}
	}

}]);
'use strict';

angular.module('userModule').controller('otherUserControlller', ['registerUserConfigFactory', 'connectProductFactory', '$location', '$scope', '$stateParams', function (registerUserConfigFactory, connectProductFactory, $location, $scope, $stateParams) {
	
	connectProductFactory.get({action: 'all', getByName: $stateParams.userName}, function (respone) {
		$scope.userProducts = respone.product;
		$scope.userInfo = respone.user;

		//if user is not logged then redirect to the sign in page
		if(!$scope.userInfo) $location.path('/signin');

		$scope.banner = function () {
			if($scope.userInfo.length > 0){
				if($scope.userInfo.banner){
					return 'public/uploads/' + $scope.userInfo.banner;
				} else {
					return 'public/modules/config/img/banner.jpg';
				}
			} else {
				return 'public/modules/config/img/banner.jpg';
			}
		}
	}, function (err) {
		$location.path('/notfound');
	});



}]);
'use strict';

angular.module('userModule').controller('profileUserControlller', ['registerUserConfigFactory', 'connectProductFactory', '$location', '$scope', function (registerUserConfigFactory, connectProductFactory, $location, $scope) {
	$scope.userInfo = registerUserConfigFactory.getUser();

	//if user is not logged then redirect to the sign in page
	if(!$scope.userInfo) $location.path('/signin');

	$scope.banner = function () {
		if($scope.userInfo){
			if($scope.userInfo.banner.length){
				return 'public/uploads/' + $scope.userInfo.banner;
			} else {
				return 'public/modules/config/img/banner.jpg';
			}
		}
	}

	connectProductFactory.get({action: 'all', getByName: $scope.userInfo.name}, function (respone) {
		$scope.userProducts = respone.product;
	});

}]);
'use strict';

angular.module('userModule').controller('removeAccountUserController', ['$scope', '$location', 'connectUserFactory', function ($scope, $location, connectUserFactory) {
	$scope.cancelRemove = function () {
		$location.path('/profile');
	}

	$scope.confirmRemove = function () {
		connectUserFactory.remove(function (response) {
			$location.path('/');
		}, function (error) {
			$scope.error = error.data.message;
		});
	}
}]);
'use strict';

angular.module('userModule').controller('settingUserController', ['$scope', '$location', 'connectUserFactory', function ($scope, $location, connectUserFactory) {
	$scope.removeAccount = function () {
		$location.path('/profile/remove');
	}

	$scope.updateAccount = function () {
		// userInfo is inherted from the profile controller , this is due to the fact
		// that this conntroller is child controller of the profile controller , this is
		// done through the ui-router
		var fd = new FormData();
		fd.append('logo', document.getElementById('logo').files[0]);
		fd.append('banner', document.getElementById('banner').files[0]);
		fd.append('firstName', $scope.userInfo.firstName);
		fd.append('lastName', $scope.userInfo.lastName);
		fd.append('email', $scope.userInfo.email);
		fd.append('pageDesc', $scope.userInfo.pageDesc);

		connectUserFactory.update(fd, function (response) {
			$scope.success = true;
		}, function (error) {
			$scope.error = error.data.message;
		});
	}

}]);
'user strict';

angular.module('userModule').directive('sidebarLogoUserDirective', [function  () {
	return {
		restrict: 'A',
		replace: true,
		transclude: true,
		scope: {
			user: '=sidebarLogoUserDirective'
		},
		link: function (scope, elem, attrs) {
			scope.$watch('user', function (value) {
				var logo;
				if(value){
					if(value.logo){
						logo = '<img style="margin-bottom:-2%;" class="img-responsive text-center" src="' + "public/uploads/" + value.logo + '">';
						elem.append(logo);
					} else {
						logo = '<span class="glyphicon glyphicon-user" style="font-size:164px;" aria-hidden="true"></span>';
						elem.append(logo);
					}
				}
			});
		}
	}
}]);
'use strict';

//Get the category of products
angular.module('userModule').directive('sidebarUserDirective', ['registerUserConfigFactory', '$stateParams', function (registerUserConfigFactory, $stateParams) {
	return {
		restrict: 'A',
		templateUrl: 'public/modules/user/view/sidebar.user.view.html',
		replace: true,
		transclude: true,
		scope: {
			product: '=sidebarUserDirective'
		},
		link: function (scope, elem, attrs) {
			scope.user = registerUserConfigFactory.getUser();
			scope.$watch('product', function (value) {
				var cats = [];
				if(value){
					value.forEach(function (item) {
						if(item){
							var profile;
							//if the category is not in the "cats" array then add it
							if(cats.indexOf(item.category) == -1){
								if(scope.user._id == item.user){
									profile = 'profile';
								} else {
									profile = scope.user.name;
								}
								cats.push({name: item.category, value: item.category, profile: profile});
							}
						}
					});
					scope.cats = cats;
				}
			});

			//show the active sidebar nav link
			scope.isActive = function (value) {
				if(value == $stateParams.category){
					return true;
				} else if(value == 'all' && !$stateParams.category){
					return true;
				}
			}
		}
	}
}]);
'use strict';

angular.module('userModule').factory('connectUserFactory', ['$resource', function ($resource) {
	return $resource('/user/:action/:byUserName',
		{
			name: "@byUserName",
			action: "@action"
		},
		{
			"update": {
				method:"PUT",
				withCredentials: true,
				headers: {'Content-Type': undefined },
				transformRequest: angular.identity
			}
		});
}]);